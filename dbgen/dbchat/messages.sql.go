// Code generated by sqlc. DO NOT EDIT.
// source: messages.sql

package dbchat

import (
	"context"
)

const addMessage = `-- name: AddMessage :one
INSERT INTO
    "messages"
(
    "author",
    "text"
)
VALUES
(
    $1::text,
    $2::text
)
RETURNING id, author, text, datetime
`

type AddMessageParams struct {
	Author string `json:"author"`
	Text   string `json:"text"`
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.addMessageStmt, addMessage, arg.Author, arg.Text)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Text,
		&i.Datetime,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many

SELECT
    "id",
    "author",
    "text",
    "datetime"
FROM
    "messages"
ORDER BY
    "datetime"
LIMIT 50
OFFSET 0
`

// messages.sql
func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.query(ctx, q.getMessagesStmt, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Text,
			&i.Datetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
